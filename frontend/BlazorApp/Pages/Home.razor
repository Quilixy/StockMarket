@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using System.Globalization;

<PageTitle>Home</PageTitle>

<h1>@greetingMessage</h1>

<p>Welcome to Stock Market project.</p>

@if (balance != null)
{
    <p>Current Balance: @balance</p>
    @if (commissionRate != null)
    {
        <p>Commission Rate: @commissionRate%</p>
    }
    else if (loading)
    {
        <p>Loading commission rate...</p>
    }
    else
    {
        <p>Unable to retrieve commission rate.</p>
    }
    <div>
        <label for="balanceCardCode">Enter BalanceCard Code:</label>
        <input id="balanceCardCode" @bind="balanceCardCode" />
        <button @onclick="UseBalanceCard">Use BalanceCard</button>
    </div>
}
else if (loading)
{
    <p>Loading balance...</p>
}
else
{
    <p>You are not logged in.</p>
}



@code {
    private string greetingMessage = "Hello, world!";
    private decimal? balance;
    private decimal? commissionRate;
    private bool loading = true;
    private string balanceCardCode;

    protected override async Task OnInitializedAsync()
    {
        var rememberMe = await localStorage.GetItemAsync<bool>("rememberMe");

        if (rememberMe)
        {
            var username = await localStorage.GetItemAsync<string>("username");
            greetingMessage = $"Merhaba, {username}!";

            await LoadBalanceAsync();
            await LoadCommissionRateAsync();
        }
        else
        {
            loading = false;
        }
    }

    private async Task LoadBalanceAsync()
    {
        try
        {
            var token = await localStorage.GetItemAsync<string>("token");

            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetAsync("http://localhost:5284/api/balance");

                if (response.IsSuccessStatusCode)
                {
                    var balanceResponse = await response.Content.ReadFromJsonAsync<BalanceResponse>();
                    balance = balanceResponse?.Balance;
                }
                else
                {
                    Console.WriteLine("Failed to load balance.");
                }
            }
            else
            {
                Console.WriteLine("No token found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading balance: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadCommissionRateAsync()
    {
        try
        {
            var token = await localStorage.GetItemAsync<string>("token");

            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetAsync("http://localhost:5284/api/transaction/commission");

                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();                    
                    commissionRate = decimal.Parse(jsonResponse, CultureInfo.InvariantCulture) * 100;
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to load commission rate. Status: {response.StatusCode}, Error: {errorMessage}");
                }
            }
            else
            {
                Console.WriteLine("No token found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading commission rate: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }


    private async Task UseBalanceCard()
    {
        if (string.IsNullOrWhiteSpace(balanceCardCode))
        {
            Console.WriteLine("BalanceCard code is empty.");
            return;
        }

        try
        {
            var token = await localStorage.GetItemAsync<string>("token");

            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var request = new BalanceCardRequest { Code = balanceCardCode };
                var response = await Http.PostAsJsonAsync("http://localhost:5284/api/balancecard/use", request);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("BalanceCard used successfully.");
                    await LoadBalanceAsync();
                }
                else
                {
                    Console.WriteLine("Failed to use BalanceCard.");
                }
            }
            else
            {
                Console.WriteLine("No token found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error using BalanceCard: {ex.Message}");
        }
    }

    public class BalanceResponse
    {
        public decimal Balance { get; set; }
    }

    public class CommissionResponse
    {
        public decimal Rate { get; set; }
    }

    public class BalanceCardRequest
    {
        public string Code { get; set; }
    }
}
