@page "/admin"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

<PageTitle>Admin Page</PageTitle>

@if (loading)
{
    <p>Loading...</p>
}
else if (isAdmin)
{
    <h1>Welcome to the Admin Page</h1>
    <p>This content is only for administrators.</p>
    <UserManagement />
    
    <button @onclick="NavigateToStockManagement">Manage Stocks</button>
    <button @onclick="NavigateToPage1">Add Balance Card</button>
    <button @onclick="NavigateToPage2">User Management</button>

    @if (systemBalance.HasValue)
    {
        <div>
            <h1>System Balance: @systemBalance.Value</h1>
        </div>
    }
    else
    {
        <p>Unable to fetch system balance.</p>
    }
}
else
{
    <p>You do not have access to this page.</p>
}

@code {
    private bool isAdmin = false;
    private bool loading = true;
    private decimal? systemBalance;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");

        if (!string.IsNullOrEmpty(token))
        {
            var role = GetRoleFromToken(token);

            if (role == "Admin") 
            {
                isAdmin = true;
                await FetchSystemBalanceAsync();
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

        loading = false;
        StateHasChanged();
    }

    private string GetRoleFromToken(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;

        return jsonToken?.Claims.FirstOrDefault(claim => claim.Type == "role")?.Value;
    }

    private async Task FetchSystemBalanceAsync()
    {
        try
        {
            var token = await localStorage.GetItemAsync<string>("token");

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Token not found.");
                return;
            }

            var requestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5284/api/balance/system");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Raw balance response: {jsonResponse}");

                var balanceResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<BalanceResponse>(jsonResponse);

                if (balanceResponse != null)
                {
                    systemBalance = balanceResponse.Balance;
                    Console.WriteLine($"Parsed balance: {systemBalance}");
                }
                else
                {
                    Console.WriteLine("Failed to parse system balance.");
                }
            }
            else
            {
                Console.WriteLine($"Failed to fetch system balance. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching system balance: {ex.Message}");
        }
    }

    public class BalanceResponse
    {
        public decimal Balance { get; set; }
    }


    private void NavigateToPage1()
    {
        Navigation.NavigateTo("/admin/balancecard");
    }

    private void NavigateToPage2()
    {
        Navigation.NavigateTo("/admin/usermanagement");
    }
    private void NavigateToStockManagement()
    {
        Navigation.NavigateTo("/admin/stockmanagement");
    }

}

